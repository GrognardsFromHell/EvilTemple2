<?xml version="1.0" encoding="utf-8"?>
<material xmlns="http://hartte.de/eviltemple/material.xsd">

  <pass>
    <shader>
      <vertexShader version="120">
        {{LIGHTING_ON}}
        <include file=":/material/lighting.vs" />
        {{/LIGHTING_ON}}
        <code>
          <![CDATA[
uniform mat4 worldViewProjectionMatrix;

attribute vec4 vertexPosition;
attribute vec2 vertexTexCoord;

varying vec2 texCoord;

{{NORMALS_ON}}
attribute vec4 vertexNormal;
{{/NORMALS_ON}}

{{SPHEREMAP_ON}}
varying vec3 fragNormal;
{{/SPHEREMAP_ON}}

void main() {
{{LIGHTING_ON}}
        lighting(vertexPosition, vertexNormal);
{{/LIGHTING_ON}}

        gl_Position = worldViewProjectionMatrix * vertexPosition;
        texCoord = vertexTexCoord; // Pass through texture coordinates

        {{SPHEREMAP_ON}}
        fragNormal = vertexNormal.xyz;
        {{/SPHEREMAP_ON}}
}
]]>
        </code>
      </vertexShader>

      <fragmentShader version="120">
        {{LIGHTING_ON}}
        <include file=":/material/lighting.fs" />
        {{/LIGHTING_ON}}
        {{TEXTUREANIM_ON}}
        <include file=":/material/textureanim.fs" />
        {{/TEXTUREANIM_ON}}
        {{SPHEREMAP_ON}}
        <include file=":/material/spheremap.fs" />
        {{/SPHEREMAP_ON}}

        <code>
        <![CDATA[

// Material properties
const vec4 materialColor = vec4({{MATERIAL_DIFFUSE}});
const int shininess = {{SPECULAR_POWER}};

varying vec2 texCoord;

{{TEXTUREANIM_ON}}
uniform float t = 0;
{{/TEXTUREANIM_ON}}

{{SPHEREMAP_ON}}
varying vec3 fragNormal;
{{/SPHEREMAP_ON}}

{{SAMPLERS}}

void main(void)
{
{{LIGHTING_ON}}
  vec4 Idiff = {{LIGHTING_TERM}};
{{/LIGHTING_ON}}

   {{PIXEL_TERM}}

    if (gl_FragColor.a == 0)
        discard;
}
]]>
        </code>
      </fragmentShader>

      <attribute name="vertexPosition" buffer="positions" />
      {{NORMALS_ON}}
      <attribute name="vertexNormal" buffer="normals" />
      {{/NORMALS_ON}}
      <attribute name="vertexTexCoord" buffer="texCoords" components="2" />
      <uniform name="worldViewProjectionMatrix" semantic="WorldViewProjection" />
      {{LIGHTING_ON}}
      <uniform name="viewMatrix" semantic="View" />
      <uniform name="worldViewMatrix" semantic="WorldView" />
      {{/LIGHTING_ON}}
      {{TEXTUREANIM_ON}}
      <!-- Time is 0.0 to 1.0 (wraps) for each second -->
      <uniform name="t" semantic="Time" />
      {{/TEXTUREANIM_ON}}
      {{SAMPLER_UNIFORMS}}
    </shader>

    {{TEXTURES}}

    <cullFace>{{CULL_FACE}}</cullFace>
    <blend>{{BLEND}}</blend>
    <blendFunc src="{{BLEND_SRC}}" dest="{{BLEND_DEST}}" />
    <depthWrite>{{DEPTH_WRITE}}</depthWrite>
    <depthTest>{{DEPTH_TEST}}</depthTest>
  </pass>

{{SHADOW_ON}}
<!--
    Shadow pass
-->
  <pass>
    <shader>
      <vertexShader>
        <include file=":/material/shadow.fs" />
        <code></code>
      </vertexShader>

      <fragmentShader>
        <include file=":/material/shadow.vs" />
          <code></code>
      </fragmentShader>

      <attribute name="vertexPosition" buffer="positions" />
      <uniform name="viewProjectionMatrix" semantic="ViewProjection" />
      <uniform name="worldMatrix" semantic="World" />
    </shader>

    <blend>true</blend>
    <blendFunc src="srcAlpha" dest="oneMinusSrcAlpha" />
    <depthWrite>false</depthWrite>
    <clearStencil value="1" />
    <stencilTest>true</stencilTest>
    <stencilFunc reference="0" function="notequal" />
    <stencilOp stencilFail="keep" depthFail="keep" depthPass="replace" />
  </pass>
{{/SHADOW_ON}}

</material>
