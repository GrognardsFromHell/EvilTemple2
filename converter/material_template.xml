<?xml version="1.0" encoding="utf-8"?>
<material xmlns="http://hartte.de/eviltemple/material.xsd">

  <pass>
    <shader>
      <vertexShader version="120">
        {{LIGHTING_ON}}
        <include file=":/material/lighting.vs" />
        {{/LIGHTING_ON}}
        <code>
          <![CDATA[
uniform mat4 worldViewProjectionMatrix;

attribute vec4 vertexPosition;
attribute vec2 vertexTexCoord;

varying vec2 texCoord;

{{LIGHTING_ON}}
attribute vec4 vertexNormal;
varying vec3 normal;
{{/LIGHTING_ON}}

void main() {
{{LIGHTING_ON}}        
        lighting(vertexPosition);
        normal = vec3(normalize(vertexNormal));
{{/LIGHTING_ON}}     

        gl_Position = worldViewProjectionMatrix * vertexPosition;
        texCoord = vertexTexCoord; // Pass through texture coordinates
}
]]>
        </code>
      </vertexShader>

      <fragmentShader version="120">
        {{LIGHTING_ON}}
        <include file=":/material/lighting.fs" />
        {{/LIGHTING_ON}}
        <code>
        <![CDATA[

// Material properties
const vec4 materialColor = vec4({{MATERIAL_DIFFUSE}});
const int shininess = 50;

varying vec2 texCoord;
{{LIGHTING_ON}}
varying vec3 normal;
{{/LIGHTING_ON}}

{{SAMPLERS}}

void main(void)
{
{{LIGHTING_ON}}
  vec4 Idiff = lighting(normalize(normal), shininess);
{{/LIGHTING_ON}}

   {{PIXEL_TERM}}
}
]]>
        </code>
      </fragmentShader>

      <attribute name="vertexPosition" buffer="positions" />
      {{LIGHTING_ON}}
      <attribute name="vertexNormal" buffer="normals" />
      {{/LIGHTING_ON}}
      <attribute name="vertexTexCoord" buffer="texCoords" components="2" />
      <uniform name="worldViewProjectionMatrix" semantic="WorldViewProjection" />
      {{LIGHTING_ON}}
      <uniform name="worldMatrix" semantic="World" />
      <uniform name="worldInverseMatrix" semantic="WorldInverse" />
      <uniform name="worldViewInverseMatrix" semantic="WorldViewInverse" />
      {{/LIGHTING_ON}}
      {{SAMPLER_UNIFORMS}}
    </shader>

    {{TEXTURES}}

    <cullFace>{{CULL_FACE}}</cullFace>
    <blend>{{BLEND}}</blend>
    <blendFunc src="{{BLEND_SRC}}" dest="{{BLEND_DEST}}" />
    <depthWrite>{{DEPTH_WRITE}}</depthWrite>
    <depthTest>{{DEPTH_TEST}}</depthTest>
  </pass>

{{SHADOW_ON}}
<!--
    Shadow pass
-->
  <pass>
    <shader>
      <vertexShader>
        <code>
          <![CDATA[
#version 120

uniform mat4 viewProjectionMatrix;
uniform mat4 worldMatrix;
const vec4 invertedLightDirection = vec4(0.447, 0.89, 0, 0);

attribute vec4 vertexPosition;

void main() {
  vec4 v = worldMatrix * vertexPosition;

  float lambda = v.y / invertedLightDirection.y; // y must be non-zero
  v.y = 0;
  v.x -= invertedLightDirection.x * lambda;
  v.z -= invertedLightDirection.z * lambda;

  gl_Position = viewProjectionMatrix * v;
}
]]>
        </code>
      </vertexShader>

      <fragmentShader>
        <code>
          <![CDATA[
#version 120

void main(void)
{
   gl_FragColor = vec4(0, 0, 0, 0.75);
}
]]>
        </code>
      </fragmentShader>

      <attribute name="vertexPosition" buffer="positions" />
      <uniform name="viewProjectionMatrix" semantic="ViewProjection" />
      <uniform name="worldMatrix" semantic="World" />
    </shader>

    <depthWrite>false</depthWrite>
  </pass>
{{/SHADOW_ON}}

</material>
